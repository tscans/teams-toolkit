version: 1.0.0

environmentFolderPath: ./env

provision:
  - uses: botAadApp/create
    with:
      name: "botaad-display-name"
    # Output: following environment variable will be persisted in current environment's .env file.
    # BOT_ID: the Microsoft Entra app client id created for bot
    # SECRET_BOT_PASSWORD: the Microsoft Entra app client secret created for bot
    writeToEnvironmentFile:
      botId: XXX
      botPassword: SECRET_XXXX
  - uses: arm/deploy # Deploy given ARM templates parallelly.
    with:
      subscriptionId: ${{AZURE_SUBSCRIPTION_ID}} # The AZURE_SUBSCRIPTION_ID is a built-in environment variable. TeamsFx will ask you select one subscription if its value is empty. You're free to reference other environment varialbe here, but TeamsFx will not ask you to select subscription if it's empty in this case.
      resourceGroupName: ${{AZURE_RESOURCE_GROUP_NAME}} # The AZURE_RESOURCE_GROUP_NAME is a built-in environment variable. TeamsFx will ask you to select or create one resource group if its value is empty. You're free to reference other environment varialbe here, but TeamsFx will not ask you to select or create resource grouop if it's empty in this case.
      templates:
        - path: ./infra/azure.bicep # Relative path to teamsfx folder
          parameters: ./infra/azure.parameters.json # Relative path to teamsfx folder. Placeholders will be replaced with corresponding environment variable before ARM deployment.
          deploymentName: Create-resources-for-tab # Required when deploy ARM template
      bicepCliVersion: v0.9.1 # Teams Toolkit will download this bicep CLI version from github for you, will use bicep CLI in PATH if you remove this config.
    # Output: every bicep output will be persisted in current environment's .env file with certain naming conversion. Refer https://aka.ms/teamsfx-actions/arm-deploy for more details on the naming conversion rule.

  - uses: azureStorage/enableStaticWebsite
    with:
      storageResourceId: ${{TAB_AZURE_STORAGE_RESOURCE_ID}}
      indexPage: index.html
      errorPage: error.html
    # Output: N/A

  - uses: aadApp/create
    with:
      name: my-aad
      generateClientSecret: true
      signInAudience: "AzureADMyOrg"
    writeToEnvironmentFile:
      clientId: XX_1
      objectId: XX_2
      clientSecret: SECRET_X

deploy:
  # Run npm command
  - uses: cli/runNpmCommand
    with:
      args: install --production
  # Run npm command
  - uses: cli/runNpmCommand
    with:
      args: run build --if-present
  # Deploy bits to Azure Storage Static Website
  - uses: azureStorage/deploy
    with:
      # Deploy base folder
      artifactFolder: build
      # The resource id of the cloud resource to be deployed to. 
      # This key will be generated by arm/deploy action automatically. 
      # You can replace it with your existing Azure Resource id 
      # or add it to your environment variable file.
      resourceId: ${{TAB_AZURE_STORAGE_RESOURCE_ID}}
  - uses: script
    with:
      run: echo "::set-output key=value" # command to run or path to the script. Succeeds if exit code is 0.
      workingDirectory: ./scripts # current working directory. Defaults to the directory of this file.
      shell: bash # bash, sh, powershell(Powershell Desktop), pwsh(powershell core), cmd. Can be omitted. If omitted, it defaults to bash on Linux/MacOS, defaults to pwsh on windows.
      timeout: 1000 # timeout in ms
      redirectTo: ./scripts.out # redirect stdout and stderr to a file

  - uses: teamsApp/create # Creates a Teams app
    with:
      name: ${{TEAMS_APP_NAME}}
    writeToEnvironmentFile:
      teamsAppId: TEAMS_APP_ID
    # Output: following environment variable will be persisted in current environment's .env file.
    # TEAMS_APP_ID: the id of Teams app

  - uses: teamsApp/validateManifest
    with:
      manifestPath: ./appPackage/manifest.template.json # Path to manifest template
  - uses: teamsApp/zipAppPackage # Build Teams app package with latest env value
    with:
      manifestPath: ./appPackage/manifest.template.json # Path to manifest template
      outputZipPath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip
      outputJsonPath: ./build/appPackage/manifest.${{TEAMSFX_ENV}}.json
  - uses: teamsApp/validateAppPackage
    with:
      appPackagePath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip # Path to zipped Teams app package
  - uses: teamsApp/update # Apply the Teams app manifest to an existing Teams app. Will use the app id in manifest file to determine which Teams app to update.
    with:
      appPackagePath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip # Relative path to teamsfx folder. This is the path for built zip file.

publish:
  - uses: teamsApp/validateManifest
    with:
      manifestPath: ./appPackage/manifest.template.json # Path to manifest template
  - uses: teamsApp/zipAppPackage
    with:
      manifestPath: ./appPackage/manifest.template.json # Path to manifest template
      outputZipPath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip
      outputJsonPath: ./build/appPackage/manifest.${{TEAMSFX_ENV}}.json
  - uses: teamsApp/publishAppPackage # Publish the app to Teams app catalog
    with:
      appPackagePath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip
    writeToEnvironmentFile:
      publishedAppId: PUBLISHED_APP_ID
  # Output: following environment variable will be persisted in current environment's .env file.
  # TEAMS_APP_PUBLISHED_APP_ID: app id in Teams tenant app catalog.
projectId: 37c1f319-7ce1-47b0-8a13-6373bf83f13d